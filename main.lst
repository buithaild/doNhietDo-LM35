CCS PCM C Compiler, Version 5.101, 43599               16-Apr-22 00:51

               Filename:   D:\machDoNhietDo\main.lst

               ROM used:   1375 words (17%)
                           Largest free fragment is 2048
               RAM used:   23 (6%) at main() level
                           45 (12%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4A7
0003:  NOP
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA C4,27
000D:  DATA 20,27
000E:  DATA C8,24
000F:  DATA 45,2A
0010:  DATA 20,22
0011:  DATA 4F,10
0012:  DATA CC,26
0013:  DATA B3,1A
0014:  DATA 00,00
0015:  DATA 4E,24
0016:  DATA C9,22
0017:  DATA 54,22
0018:  DATA 4F,1D
0019:  DATA 25,18
001A:  DATA 32,17
001B:  DATA 32,33
001C:  DATA 00,00
001D:  DATA 43,00
*
0167:  MOVF   0B,W
0168:  MOVWF  2E
0169:  BCF    0B.7
016A:  BSF    03.5
016B:  BSF    03.6
016C:  BSF    0C.7
016D:  BSF    0C.0
016E:  NOP
016F:  NOP
0170:  BCF    03.5
0171:  BCF    03.6
0172:  BTFSC  2E.7
0173:  BSF    0B.7
0174:  BSF    03.6
0175:  MOVF   0C,W
0176:  ANDLW  7F
0177:  BTFSC  03.2
0178:  GOTO   1BB
0179:  BCF    03.6
017A:  MOVWF  2E
017B:  BSF    03.6
017C:  MOVF   0D,W
017D:  BCF    03.6
017E:  MOVWF  2F
017F:  BSF    03.6
0180:  MOVF   0F,W
0181:  BCF    03.6
0182:  MOVWF  30
0183:  MOVF   2E,W
0184:  MOVWF  3B
0185:  CALL   143
0186:  MOVF   2F,W
0187:  BSF    03.6
0188:  MOVWF  0D
0189:  BCF    03.6
018A:  MOVF   30,W
018B:  BSF    03.6
018C:  MOVWF  0F
018D:  BCF    03.6
018E:  MOVF   0B,W
018F:  MOVWF  31
0190:  BCF    0B.7
0191:  BSF    03.5
0192:  BSF    03.6
0193:  BSF    0C.7
0194:  BSF    0C.0
0195:  NOP
0196:  NOP
0197:  BCF    03.5
0198:  BCF    03.6
0199:  BTFSC  31.7
019A:  BSF    0B.7
019B:  BSF    03.6
019C:  RLF    0C,W
019D:  RLF    0E,W
019E:  ANDLW  7F
019F:  BTFSC  03.2
01A0:  GOTO   1BB
01A1:  BCF    03.6
01A2:  MOVWF  2E
01A3:  BSF    03.6
01A4:  MOVF   0D,W
01A5:  BCF    03.6
01A6:  MOVWF  2F
01A7:  BSF    03.6
01A8:  MOVF   0F,W
01A9:  BCF    03.6
01AA:  MOVWF  30
01AB:  MOVF   2E,W
01AC:  MOVWF  3B
01AD:  CALL   143
01AE:  MOVF   2F,W
01AF:  BSF    03.6
01B0:  MOVWF  0D
01B1:  BCF    03.6
01B2:  MOVF   30,W
01B3:  BSF    03.6
01B4:  MOVWF  0F
01B5:  INCF   0D,F
01B6:  BTFSC  03.2
01B7:  INCF   0F,F
01B8:  BCF    03.6
01B9:  GOTO   167
01BA:  BSF    03.6
01BB:  BCF    03.6
01BC:  RETURN
01BD:  MOVLW  8E
01BE:  MOVWF  77
01BF:  MOVF   2F,W
01C0:  MOVWF  78
01C1:  MOVF   2E,W
01C2:  MOVWF  79
01C3:  CLRF   7A
01C4:  MOVF   78,F
01C5:  BTFSS  03.2
01C6:  GOTO   1D1
01C7:  MOVF   79,W
01C8:  MOVWF  78
01C9:  CLRF   79
01CA:  MOVLW  08
01CB:  SUBWF  77,F
01CC:  MOVF   78,F
01CD:  BTFSS  03.2
01CE:  GOTO   1D1
01CF:  CLRF   77
01D0:  GOTO   1D9
01D1:  BCF    03.0
01D2:  BTFSC  78.7
01D3:  GOTO   1D8
01D4:  RLF    79,F
01D5:  RLF    78,F
01D6:  DECF   77,F
01D7:  GOTO   1D1
01D8:  BCF    78.7
01D9:  BCF    0A.3
01DA:  BCF    0A.4
01DB:  GOTO   4E9 (RETURN)
01DC:  MOVF   3B,W
01DD:  BTFSC  03.2
01DE:  GOTO   24C
01DF:  MOVWF  43
01E0:  MOVF   3F,W
01E1:  BTFSC  03.2
01E2:  GOTO   24C
01E3:  ADDWF  43,F
01E4:  BTFSC  03.0
01E5:  GOTO   1ED
01E6:  MOVLW  7F
01E7:  SUBWF  43,F
01E8:  BTFSS  03.0
01E9:  GOTO   24C
01EA:  BTFSC  03.2
01EB:  GOTO   24C
01EC:  GOTO   1F1
01ED:  MOVLW  81
01EE:  ADDWF  43,F
01EF:  BTFSC  03.0
01F0:  GOTO   24C
01F1:  MOVF   43,W
01F2:  MOVWF  77
01F3:  CLRF   78
01F4:  CLRF   79
01F5:  CLRF   7A
01F6:  MOVF   3C,W
01F7:  MOVWF  47
01F8:  BSF    47.7
01F9:  MOVF   3D,W
01FA:  MOVWF  46
01FB:  MOVF   3E,W
01FC:  MOVWF  45
01FD:  MOVLW  18
01FE:  MOVWF  43
01FF:  CLRF   44
0200:  BTFSS  45.0
0201:  GOTO   21A
0202:  MOVF   42,W
0203:  ADDWF  7A,F
0204:  BTFSS  03.0
0205:  GOTO   20C
0206:  INCF   79,F
0207:  BTFSS  03.2
0208:  GOTO   20C
0209:  INCF   78,F
020A:  BTFSC  03.2
020B:  BSF    44.7
020C:  MOVF   41,W
020D:  ADDWF  79,F
020E:  BTFSS  03.0
020F:  GOTO   213
0210:  INCF   78,F
0211:  BTFSC  03.2
0212:  BSF    44.7
0213:  MOVF   40,W
0214:  MOVWF  3D
0215:  BSF    3D.7
0216:  MOVF   3D,W
0217:  ADDWF  78,F
0218:  BTFSC  03.0
0219:  BSF    44.7
021A:  RLF    44,F
021B:  RRF    78,F
021C:  RRF    79,F
021D:  RRF    7A,F
021E:  RRF    47,F
021F:  RRF    46,F
0220:  RRF    45,F
0221:  BCF    03.0
0222:  DECFSZ 43,F
0223:  GOTO   1FF
0224:  MOVLW  01
0225:  ADDWF  77,F
0226:  BTFSC  03.0
0227:  GOTO   24C
0228:  BTFSC  78.7
0229:  GOTO   231
022A:  RLF    47,F
022B:  RLF    7A,F
022C:  RLF    79,F
022D:  RLF    78,F
022E:  DECF   77,F
022F:  BTFSC  03.2
0230:  GOTO   24C
0231:  BTFSS  47.7
0232:  GOTO   242
0233:  INCF   7A,F
0234:  BTFSS  03.2
0235:  GOTO   242
0236:  INCF   79,F
0237:  BTFSS  03.2
0238:  GOTO   242
0239:  INCF   78,F
023A:  BTFSS  03.2
023B:  GOTO   242
023C:  RRF    78,F
023D:  RRF    79,F
023E:  RRF    7A,F
023F:  INCF   77,F
0240:  BTFSC  03.2
0241:  GOTO   24C
0242:  MOVF   3C,W
0243:  MOVWF  44
0244:  MOVF   40,W
0245:  XORWF  44,F
0246:  BTFSS  44.7
0247:  GOTO   24A
0248:  BSF    78.7
0249:  GOTO   250
024A:  BCF    78.7
024B:  GOTO   250
024C:  CLRF   77
024D:  CLRF   78
024E:  CLRF   79
024F:  CLRF   7A
0250:  RETURN
0251:  MOVF   32,W
0252:  BTFSC  03.2
0253:  GOTO   316
0254:  MOVWF  3E
0255:  MOVF   36,W
0256:  BTFSC  03.2
0257:  GOTO   316
0258:  SUBWF  3E,F
0259:  BTFSS  03.0
025A:  GOTO   260
025B:  MOVLW  7F
025C:  ADDWF  3E,F
025D:  BTFSC  03.0
025E:  GOTO   316
025F:  GOTO   266
0260:  MOVLW  81
0261:  SUBWF  3E,F
0262:  BTFSS  03.0
0263:  GOTO   316
0264:  BTFSC  03.2
0265:  GOTO   316
0266:  MOVF   3E,W
0267:  MOVWF  77
0268:  CLRF   78
0269:  CLRF   79
026A:  CLRF   7A
026B:  CLRF   3D
026C:  MOVF   33,W
026D:  MOVWF  3C
026E:  BSF    3C.7
026F:  MOVF   34,W
0270:  MOVWF  3B
0271:  MOVF   35,W
0272:  MOVWF  3A
0273:  MOVLW  19
0274:  MOVWF  3E
0275:  MOVF   39,W
0276:  SUBWF  3A,F
0277:  BTFSC  03.0
0278:  GOTO   289
0279:  MOVLW  01
027A:  SUBWF  3B,F
027B:  BTFSC  03.0
027C:  GOTO   289
027D:  SUBWF  3C,F
027E:  BTFSC  03.0
027F:  GOTO   289
0280:  SUBWF  3D,F
0281:  BTFSC  03.0
0282:  GOTO   289
0283:  INCF   3D,F
0284:  INCF   3C,F
0285:  INCF   3B,F
0286:  MOVF   39,W
0287:  ADDWF  3A,F
0288:  GOTO   2BB
0289:  MOVF   38,W
028A:  SUBWF  3B,F
028B:  BTFSC  03.0
028C:  GOTO   2A4
028D:  MOVLW  01
028E:  SUBWF  3C,F
028F:  BTFSC  03.0
0290:  GOTO   2A4
0291:  SUBWF  3D,F
0292:  BTFSC  03.0
0293:  GOTO   2A4
0294:  INCF   3D,F
0295:  INCF   3C,F
0296:  MOVF   38,W
0297:  ADDWF  3B,F
0298:  MOVF   39,W
0299:  ADDWF  3A,F
029A:  BTFSS  03.0
029B:  GOTO   2BB
029C:  INCF   3B,F
029D:  BTFSS  03.2
029E:  GOTO   2BB
029F:  INCF   3C,F
02A0:  BTFSS  03.2
02A1:  GOTO   2BB
02A2:  INCF   3D,F
02A3:  GOTO   2BB
02A4:  MOVF   37,W
02A5:  IORLW  80
02A6:  SUBWF  3C,F
02A7:  BTFSC  03.0
02A8:  GOTO   2BA
02A9:  MOVLW  01
02AA:  SUBWF  3D,F
02AB:  BTFSC  03.0
02AC:  GOTO   2BA
02AD:  INCF   3D,F
02AE:  MOVF   37,W
02AF:  IORLW  80
02B0:  ADDWF  3C,F
02B1:  MOVF   38,W
02B2:  ADDWF  3B,F
02B3:  BTFSS  03.0
02B4:  GOTO   298
02B5:  INCF   3C,F
02B6:  BTFSS  03.2
02B7:  GOTO   298
02B8:  INCF   3D,F
02B9:  GOTO   298
02BA:  BSF    7A.0
02BB:  DECFSZ 3E,F
02BC:  GOTO   2BE
02BD:  GOTO   2C9
02BE:  BCF    03.0
02BF:  RLF    3A,F
02C0:  RLF    3B,F
02C1:  RLF    3C,F
02C2:  RLF    3D,F
02C3:  BCF    03.0
02C4:  RLF    7A,F
02C5:  RLF    79,F
02C6:  RLF    78,F
02C7:  RLF    3F,F
02C8:  GOTO   275
02C9:  BTFSS  3F.0
02CA:  GOTO   2D1
02CB:  BCF    03.0
02CC:  RRF    78,F
02CD:  RRF    79,F
02CE:  RRF    7A,F
02CF:  RRF    3F,F
02D0:  GOTO   2D4
02D1:  DECF   77,F
02D2:  BTFSC  03.2
02D3:  GOTO   316
02D4:  BTFSC  3F.7
02D5:  GOTO   2FD
02D6:  BCF    03.0
02D7:  RLF    3A,F
02D8:  RLF    3B,F
02D9:  RLF    3C,F
02DA:  RLF    3D,F
02DB:  MOVF   39,W
02DC:  SUBWF  3A,F
02DD:  BTFSC  03.0
02DE:  GOTO   2E9
02DF:  MOVLW  01
02E0:  SUBWF  3B,F
02E1:  BTFSC  03.0
02E2:  GOTO   2E9
02E3:  SUBWF  3C,F
02E4:  BTFSC  03.0
02E5:  GOTO   2E9
02E6:  SUBWF  3D,F
02E7:  BTFSS  03.0
02E8:  GOTO   30C
02E9:  MOVF   38,W
02EA:  SUBWF  3B,F
02EB:  BTFSC  03.0
02EC:  GOTO   2F4
02ED:  MOVLW  01
02EE:  SUBWF  3C,F
02EF:  BTFSC  03.0
02F0:  GOTO   2F4
02F1:  SUBWF  3D,F
02F2:  BTFSS  03.0
02F3:  GOTO   30C
02F4:  MOVF   37,W
02F5:  IORLW  80
02F6:  SUBWF  3C,F
02F7:  BTFSC  03.0
02F8:  GOTO   2FD
02F9:  MOVLW  01
02FA:  SUBWF  3D,F
02FB:  BTFSS  03.0
02FC:  GOTO   30C
02FD:  INCF   7A,F
02FE:  BTFSS  03.2
02FF:  GOTO   30C
0300:  INCF   79,F
0301:  BTFSS  03.2
0302:  GOTO   30C
0303:  INCF   78,F
0304:  BTFSS  03.2
0305:  GOTO   30C
0306:  INCF   77,F
0307:  BTFSC  03.2
0308:  GOTO   316
0309:  RRF    78,F
030A:  RRF    79,F
030B:  RRF    7A,F
030C:  MOVF   33,W
030D:  MOVWF  3E
030E:  MOVF   37,W
030F:  XORWF  3E,F
0310:  BTFSS  3E.7
0311:  GOTO   314
0312:  BSF    78.7
0313:  GOTO   31A
0314:  BCF    78.7
0315:  GOTO   31A
0316:  CLRF   77
0317:  CLRF   78
0318:  CLRF   79
0319:  CLRF   7A
031A:  BCF    0A.3
031B:  BCF    0A.4
031C:  GOTO   518 (RETURN)
031D:  MOVF   0B,W
031E:  MOVWF  2F
031F:  BCF    0B.7
0320:  BSF    03.5
0321:  BSF    03.6
0322:  BSF    0C.7
0323:  BSF    0C.0
0324:  NOP
0325:  NOP
0326:  BCF    03.5
0327:  BCF    03.6
0328:  BTFSC  2F.7
0329:  BSF    0B.7
032A:  BTFSC  03.0
032B:  GOTO   354
032C:  BSF    03.6
032D:  MOVF   0C,W
032E:  ANDLW  7F
032F:  BCF    03.6
0330:  MOVWF  2F
0331:  BSF    03.6
0332:  MOVF   0D,W
0333:  BCF    03.6
0334:  MOVWF  30
0335:  BSF    03.6
0336:  MOVF   0F,W
0337:  BCF    03.6
0338:  MOVWF  31
0339:  MOVF   2F,W
033A:  MOVWF  3B
033B:  CALL   143
033C:  MOVF   30,W
033D:  BSF    03.6
033E:  MOVWF  0D
033F:  BCF    03.6
0340:  MOVF   31,W
0341:  BSF    03.6
0342:  MOVWF  0F
0343:  BCF    03.6
0344:  MOVF   0B,W
0345:  MOVWF  32
0346:  BCF    0B.7
0347:  BSF    03.5
0348:  BSF    03.6
0349:  BSF    0C.7
034A:  BSF    0C.0
034B:  NOP
034C:  NOP
034D:  BCF    03.5
034E:  BCF    03.6
034F:  BTFSC  32.7
0350:  BSF    0B.7
0351:  DECFSZ 2E,F
0352:  GOTO   354
0353:  GOTO   373
0354:  BSF    03.6
0355:  RLF    0C,W
0356:  RLF    0E,W
0357:  ANDLW  7F
0358:  BCF    03.6
0359:  MOVWF  2F
035A:  BSF    03.6
035B:  MOVF   0D,W
035C:  BCF    03.6
035D:  MOVWF  30
035E:  BSF    03.6
035F:  MOVF   0F,W
0360:  BCF    03.6
0361:  MOVWF  31
0362:  MOVF   2F,W
0363:  MOVWF  3B
0364:  CALL   143
0365:  MOVF   30,W
0366:  BSF    03.6
0367:  MOVWF  0D
0368:  BCF    03.6
0369:  MOVF   31,W
036A:  BSF    03.6
036B:  MOVWF  0F
036C:  INCF   0D,F
036D:  BTFSC  03.2
036E:  INCF   0F,F
036F:  BCF    03.0
0370:  BCF    03.6
0371:  DECFSZ 2E,F
0372:  GOTO   31D
0373:  BCF    0A.3
0374:  BCF    0A.4
0375:  GOTO   546 (RETURN)
0376:  BTFSC  03.1
0377:  GOTO   37B
0378:  MOVLW  43
0379:  MOVWF  04
037A:  BCF    03.7
037B:  CLRF   77
037C:  CLRF   78
037D:  CLRF   79
037E:  CLRF   7A
037F:  CLRF   43
0380:  CLRF   44
0381:  CLRF   45
0382:  CLRF   46
0383:  MOVF   42,W
0384:  IORWF  41,W
0385:  IORWF  40,W
0386:  IORWF  3F,W
0387:  BTFSC  03.2
0388:  GOTO   3B9
0389:  MOVLW  20
038A:  MOVWF  47
038B:  BCF    03.0
038C:  RLF    3B,F
038D:  RLF    3C,F
038E:  RLF    3D,F
038F:  RLF    3E,F
0390:  RLF    43,F
0391:  RLF    44,F
0392:  RLF    45,F
0393:  RLF    46,F
0394:  MOVF   42,W
0395:  SUBWF  46,W
0396:  BTFSS  03.2
0397:  GOTO   3A2
0398:  MOVF   41,W
0399:  SUBWF  45,W
039A:  BTFSS  03.2
039B:  GOTO   3A2
039C:  MOVF   40,W
039D:  SUBWF  44,W
039E:  BTFSS  03.2
039F:  GOTO   3A2
03A0:  MOVF   3F,W
03A1:  SUBWF  43,W
03A2:  BTFSS  03.0
03A3:  GOTO   3B3
03A4:  MOVF   3F,W
03A5:  SUBWF  43,F
03A6:  MOVF   40,W
03A7:  BTFSS  03.0
03A8:  INCFSZ 40,W
03A9:  SUBWF  44,F
03AA:  MOVF   41,W
03AB:  BTFSS  03.0
03AC:  INCFSZ 41,W
03AD:  SUBWF  45,F
03AE:  MOVF   42,W
03AF:  BTFSS  03.0
03B0:  INCFSZ 42,W
03B1:  SUBWF  46,F
03B2:  BSF    03.0
03B3:  RLF    77,F
03B4:  RLF    78,F
03B5:  RLF    79,F
03B6:  RLF    7A,F
03B7:  DECFSZ 47,F
03B8:  GOTO   38B
03B9:  MOVF   43,W
03BA:  MOVWF  00
03BB:  INCF   04,F
03BC:  MOVF   44,W
03BD:  MOVWF  00
03BE:  INCF   04,F
03BF:  MOVF   45,W
03C0:  MOVWF  00
03C1:  INCF   04,F
03C2:  MOVF   46,W
03C3:  MOVWF  00
03C4:  RETURN
03C5:  MOVF   04,W
03C6:  MOVWF  33
03C7:  MOVF   32,W
03C8:  MOVWF  35
03C9:  BTFSC  03.2
03CA:  GOTO   3E4
03CB:  MOVF   31,W
03CC:  MOVWF  3E
03CD:  MOVF   30,W
03CE:  MOVWF  3D
03CF:  MOVF   2F,W
03D0:  MOVWF  3C
03D1:  MOVF   2E,W
03D2:  MOVWF  3B
03D3:  CLRF   42
03D4:  CLRF   41
03D5:  MOVLW  20
03D6:  MOVWF  40
03D7:  MOVLW  82
03D8:  MOVWF  3F
03D9:  CALL   1DC
03DA:  MOVF   7A,W
03DB:  MOVWF  31
03DC:  MOVF   79,W
03DD:  MOVWF  30
03DE:  MOVF   78,W
03DF:  MOVWF  2F
03E0:  MOVF   77,W
03E1:  MOVWF  2E
03E2:  DECFSZ 35,F
03E3:  GOTO   3CB
03E4:  MOVF   31,W
03E5:  MOVWF  3E
03E6:  MOVF   30,W
03E7:  MOVWF  3D
03E8:  MOVF   2F,W
03E9:  MOVWF  3C
03EA:  MOVF   2E,W
03EB:  MOVWF  3B
03EC:  MOVF   3B,W
03ED:  SUBLW  B6
03EE:  MOVWF  3B
03EF:  CLRF   7A
03F0:  MOVF   3C,W
03F1:  MOVWF  3F
03F2:  BSF    3C.7
03F3:  BCF    03.0
03F4:  RRF    3C,F
03F5:  RRF    3D,F
03F6:  RRF    3E,F
03F7:  RRF    7A,F
03F8:  RRF    79,F
03F9:  RRF    78,F
03FA:  RRF    77,F
03FB:  DECFSZ 3B,F
03FC:  GOTO   3F3
03FD:  BTFSS  3F.7
03FE:  GOTO   40A
03FF:  COMF   77,F
0400:  COMF   78,F
0401:  COMF   79,F
0402:  COMF   7A,F
0403:  INCF   77,F
0404:  BTFSC  03.2
0405:  INCF   78,F
0406:  BTFSC  03.2
0407:  INCF   79,F
0408:  BTFSC  03.2
0409:  INCF   7A,F
040A:  MOVF   7A,W
040B:  MOVWF  31
040C:  MOVF   79,W
040D:  MOVWF  30
040E:  MOVF   78,W
040F:  MOVWF  2F
0410:  MOVF   77,W
0411:  MOVWF  2E
0412:  BTFSS  31.7
0413:  GOTO   421
0414:  DECF   33,F
0415:  BSF    33.5
0416:  COMF   2E,F
0417:  COMF   2F,F
0418:  COMF   30,F
0419:  COMF   31,F
041A:  INCF   2E,F
041B:  BTFSC  03.2
041C:  INCF   2F,F
041D:  BTFSC  03.2
041E:  INCF   30,F
041F:  BTFSC  03.2
0420:  INCF   31,F
0421:  MOVLW  3B
0422:  MOVWF  3A
0423:  MOVLW  9A
0424:  MOVWF  39
0425:  MOVLW  CA
0426:  MOVWF  38
0427:  CLRF   37
0428:  MOVLW  0A
0429:  MOVWF  35
042A:  MOVF   32,W
042B:  BTFSC  03.2
042C:  INCF   33,F
042D:  BSF    03.1
042E:  MOVLW  2E
042F:  MOVWF  04
0430:  BCF    03.7
0431:  MOVF   31,W
0432:  MOVWF  3E
0433:  MOVF   30,W
0434:  MOVWF  3D
0435:  MOVF   2F,W
0436:  MOVWF  3C
0437:  MOVF   2E,W
0438:  MOVWF  3B
0439:  MOVF   3A,W
043A:  MOVWF  42
043B:  MOVF   39,W
043C:  MOVWF  41
043D:  MOVF   38,W
043E:  MOVWF  40
043F:  MOVF   37,W
0440:  MOVWF  3F
0441:  CALL   376
0442:  MOVF   78,W
0443:  MOVF   77,F
0444:  BTFSS  03.2
0445:  GOTO   459
0446:  INCF   32,W
0447:  SUBWF  35,W
0448:  BTFSC  03.2
0449:  GOTO   459
044A:  MOVF   33,W
044B:  BTFSC  03.2
044C:  GOTO   45B
044D:  ANDLW  0F
044E:  SUBWF  35,W
044F:  BTFSC  03.2
0450:  GOTO   453
0451:  BTFSC  03.0
0452:  GOTO   48B
0453:  BTFSC  33.7
0454:  GOTO   48B
0455:  BTFSC  33.6
0456:  GOTO   45B
0457:  MOVLW  20
0458:  GOTO   487
0459:  MOVLW  20
045A:  ANDWF  33,F
045B:  BTFSS  33.5
045C:  GOTO   469
045D:  BCF    33.5
045E:  MOVF   32,W
045F:  BTFSS  03.2
0460:  DECF   33,F
0461:  MOVF   77,W
0462:  MOVWF  33
0463:  MOVLW  2D
0464:  MOVWF  3B
0465:  CALL   143
0466:  MOVF   33,W
0467:  MOVWF  77
0468:  CLRF   33
0469:  MOVF   32,W
046A:  SUBWF  35,W
046B:  BTFSS  03.2
046C:  GOTO   477
046D:  MOVF   77,W
046E:  MOVWF  33
046F:  MOVLW  2E
0470:  MOVWF  3B
0471:  CALL   143
0472:  MOVF   33,W
0473:  MOVWF  77
0474:  MOVLW  20
0475:  ANDWF  33,F
0476:  MOVLW  00
0477:  MOVLW  30
0478:  BTFSS  33.5
0479:  GOTO   487
047A:  BCF    33.5
047B:  MOVF   32,W
047C:  BTFSS  03.2
047D:  DECF   33,F
047E:  MOVF   77,W
047F:  MOVWF  33
0480:  MOVLW  2D
0481:  MOVWF  3B
0482:  CALL   143
0483:  MOVF   33,W
0484:  MOVWF  77
0485:  CLRF   33
0486:  MOVLW  30
0487:  ADDWF  77,F
0488:  MOVF   77,W
0489:  MOVWF  3B
048A:  CALL   143
048B:  BCF    03.1
048C:  MOVF   3A,W
048D:  MOVWF  3E
048E:  MOVF   39,W
048F:  MOVWF  3D
0490:  MOVF   38,W
0491:  MOVWF  3C
0492:  MOVF   37,W
0493:  MOVWF  3B
0494:  CLRF   42
0495:  CLRF   41
0496:  CLRF   40
0497:  MOVLW  0A
0498:  MOVWF  3F
0499:  CALL   376
049A:  MOVF   7A,W
049B:  MOVWF  3A
049C:  MOVF   79,W
049D:  MOVWF  39
049E:  MOVF   78,W
049F:  MOVWF  38
04A0:  MOVF   77,W
04A1:  MOVWF  37
04A2:  DECFSZ 35,F
04A3:  GOTO   42D
04A4:  BCF    0A.3
04A5:  BCF    0A.4
04A6:  GOTO   553 (RETURN)
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... 
.................... #FUSES NOWDT                    //No Watch Dog Timer
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
.................... 
.................... #use delay(crystal=4000000)
.................... #include <lcd.h>
.................... #define _lcd_h_
.................... #include <math.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                                                                    ////
.................... //// History:                                                           ////
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              ////
.................... ////                 The code now is small, much faster,                ////
.................... ////                 and more accurate.                                 ////
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   ////
.................... ////                 not return generic (int8 *) so type cast is done   ////
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication ////
.................... ////                 by its inverse to improve computation speed        ////
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   ////
.................... ////                 Updated routines include 64 bit versions of cos,   ////
.................... ////                 asin,atan,exp,log and dependant functions          ////
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    ////
.................... ////                 and log function                                   ////
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values ////
.................... ////                 greater then 10000000 and less then -10000000      ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef MATH_H
.................... #define MATH_H
.................... 
.................... #ifdef PI
.................... #undef  PI
.................... #endif
.................... #define PI     3.1415926535897932
.................... 
.................... 
.................... #define SQRT2  1.4142135623730950
.................... 
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279};
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718};
.................... 
.................... ///////////////////////////// Round Functions //////////////////////////////
.................... 
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res;
....................    unsigned int16 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float32)(unsigned int16)y;
.................... 
....................  else if (y < 10000000.0)
....................    { 
....................       l = (unsigned int16)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float32)l);
....................       res = 32768.0*(float32)l;
....................       res += (float32)(unsigned int16)y;
....................    }
.................... 
....................  else
....................   res = y;
.................... 
....................  y = y - (float32)(unsigned int16)y;
.................... 
....................  if (s)
....................   res = -res;
.................... 
....................  if (y != 0)
....................  {
....................   if (s == 1 && n == 0)
....................    res -= 1.0;
.................... 
....................   if (s == 0 && n == 1)
....................    res += 1.0;
....................  }
....................  if (x == 0)
....................     res = 0;
.................... 
....................  return (res);
.................... }
.................... 
.................... // Overloaded Functions to take care for new Data types in PCD
.................... // Overloaded function CEIL_FLOOR() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res;
....................    unsigned int32 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float48)(unsigned int16)y;
.................... 
....................    else if (y < 549755813888.0)
....................    {
....................       l = (unsigned int32)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float48)l);
....................       res = 32768.0*(float48)l;
....................       res += (float48)(unsigned int16)y;
....................    }
....................    else
....................    {  
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float48)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... 
.................... 
.................... // Overloaded function CEIL_FLOOR() for data type - Float64
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res;
....................    int64 l;
....................    int1 s;
.................... 
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y <= 32768.0)
....................       res = (float64)(unsigned int16)y;
....................    else if (y < 4503599627370496.0)
....................    {
....................       l = (int64)(y*0.000030517578125);
....................       y = 32768.0*(y*0.000030517578125 - (float64)l);
....................       res = 32768.0*(float64)l;
....................       res += (float64)(unsigned int16)y;
....................    }
....................    else
....................    {
....................       res = y;
....................       y = 0.0;
....................    }
....................    
....................    if(y != 0)
....................       y = y - (float64)(unsigned int16)y;
.................... 
....................    if (s)
....................       res = -res;
.................... 
....................    if (y != 0)
....................    {
....................       if (s == 1 && n == 0)
....................          res -= 1.0;
.................... 
....................       if (s == 0 && n == 1)
....................          res += 1.0;
....................    }
....................    
....................    if (x == 0)
....................       res = 0;
.................... 
....................    return (res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float floor(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds down the number x.
.................... // Date : N/A
.................... //
.................... float32 floor(float32 x)
.................... {
....................    return CEIL_FLOOR(x,0);
.................... }
.................... // Following 2 functions are overloaded functions of floor() for PCD
.................... // Overloaded function floor() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 floor(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... 
.................... // Overloaded function floor() for data type - Float64
.................... float64 floor(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 0);
.................... }
.................... #endif
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float ceil(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : rounds up the number x.
.................... // Date : N/A
.................... //
.................... float32 ceil(float32 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... // Following 2 functions are overloaded functions of ceil() for PCD
.................... // Overloaded function ceil() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ceil(float48 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... 
.................... // Overloaded function ceil() for data type - Float64
.................... float64 ceil(float64 x)
.................... {
....................    return CEIL_FLOOR(x, 1);
.................... }
.................... #endif
.................... 
....................  ////////////////////////////////////////////////////////////////////////////
.................... //   float fabs(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the absolute value of floating point number x
.................... // Returns : returns the absolute value of x
.................... // Date : N/A
.................... //
.................... #define fabs abs
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float fmod(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the floating point remainder of x/y
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the
.................... // magnitude of y. If y is zero then a domain error occurs.
.................... // Date : N/A
.................... //
.................... 
.................... float fmod(float32 x,float32 y)
.................... {
....................    float32 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... //Overloaded function for fmod() for PCD
.................... // Overloaded function fmod() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 fmod(float48 x,float48 y)
.................... {
....................    float48 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... // Overloaded function fmod() for data type - Float64
.................... float64 fmod(float64 x,float64 y)
.................... {
....................    float64 i;
....................    if (y!=0.0)
....................    {
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y);
....................       return(x-(i*y));
....................    }
....................    else
....................    {
....................    #ifdef _ERRNO
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    }
.................... }
.................... #endif
.................... //////////////////// Exponential and logarithmic functions ////////////////////
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float exp(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (e^x)
.................... // Date : N/A
.................... //
.................... #define LN2 0.6931471805599453
.................... #define LN2_INV 1.4426950408889634073
.................... 
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093,
....................                      0.0554965651,  0.240227138,  0.693147172};
.................... 
.................... 
.................... float32 exp(float32 x)
.................... {
....................    float32 y, res, r;
....................    #if defined(__PCD__)
....................    int8 data1;
....................    #endif
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... #if !defined(__PCD__)
....................    *((unsigned int8 *)(&res)) = n + 0x7F;
.................... #endif
.................... 
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+3)) = data1;
.................... #endif
.................... 
....................    y = y*LN2_INV - (float32)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded function for exp() for PCD
.................... // Overloaded function exp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 exp(float48 x)
.................... {
....................    float48 y, res, r;
....................    int8 data1;
....................    signed int8 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 88.722838)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    n = (signed int16)(x*LN2_INV);
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
....................    data1 = n+0x7F;
....................    if(bit_test(data1,0))
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7);
....................    rotate_right(&data1,1);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&res)+5)) = data1;
.................... 
....................    y = y*LN2_INV - (float48)n;
.................... 
....................    r = pe[0]*y + pe[1];
....................    r = r*y + pe[2];
....................    r = r*y + pe[3];
....................    r = r*y + pe[4];
....................    r = r*y + pe[5];
.................... 
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... 
.................... // Overloaded function exp() for data type - Float64
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011,
....................                           8.71486547014137e-009,9.84458531538385e-008,
....................                           1.32588296983536e-006,1.52489283823016e-005,
....................                           0.000154037598423921,0.00133335487036216,
....................                           0.00961812936407326,0.0555041086222122,
....................                           0.240226506962827,0.693147180559823};
.................... 
.................... float64 exp(float64 x)
.................... {
....................    float64 y, res, r;
....................    unsigned int16 data1, data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x > 709.7827128)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x*LN2_INV;
....................    n = (signed int16)y;
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       n = -n;
....................       y = -y;
....................    }
.................... 
....................    res = 0.0;
.................... 
.................... #if !defined(__PCD__)
....................    *((unsigned int16 *)(&res)) = n + 0x7F;
.................... #endif
....................    p= (((unsigned int16 *)(&res))+3);
....................    data1 = *p;
....................    data2 = *p;   
....................    data1 = n + 0x3FF;
....................    data1 = data1 <<4;
....................    if(bit_test(data2,15))
....................    bit_set(data1,15);
....................    data2 = data2 & 0x000F;
....................    data1 ^= data2;
.................... 
....................    *(((unsigned int16 *)(&res)+3)) = data1;
.................... 
.................... 
....................    y = y*LN2_INV - (float64)n;
.................... 
....................    r = pe_64[0]*y + pe_64[1];
....................    r = r*y + pe_64[2];
....................    r = r*y + pe_64[3];
....................    r = r*y + pe_64[4];
....................    r = r*y + pe_64[5];
....................    r = r*y + pe_64[6];
....................    r = r*y + pe_64[7];
....................    r = r*y + pe_64[8];
....................    r = r*y + pe_64[9];
....................    r = r*y + pe_64[10];
....................    r = r*y + pe_64[11];
....................    
....................    res = res*(1.0 + y*r);
.................... 
....................    if (s)
....................       res = 1.0/res;
....................    return(res);
.................... }
.................... #ENDIF
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217};
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the natural log of x
.................... // Date : N/A
.................... //
.................... float32 log(float32 x)
.................... {
....................    float32 y, res, r, y2;
....................    #if defined(__PCD__)
....................    unsigned int8  data1,data2;
....................    #endif
....................    signed int8 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... #if !defined(__PCD__)
....................     *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
.................... 
.................... #if defined(__PCD__) // Takes care of IEEE format
....................    data2 = *(((unsigned int8 *)(&y))+3);
....................    *(((unsigned int8 *)(&y))+3) = 0x3F;
....................    data1 = *(((unsigned int8 *)(&y))+2);
....................    bit_clear(data1,7);
....................    *(((unsigned int8 *)(&y))+2) = data1;
....................    if(bit_test(data2,7))
....................      bit_set(*(((unsigned int8 *)(&y))+3),7);
.................... #endif
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl[0]*y2 + pl[1];
.................... 
....................       r = ql[0]*y2 + ql[1];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
.................... #if !defined(__PCD__)
....................       n = *((unsigned int8 *)(&x)) - 0x7E;
.................... #endif
.................... #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&x)+3));
....................     rotate_left(&data1,1);
....................     data2 = *(((unsigned int8 *)(&x)+2));
....................     if(bit_test (data2,7))
....................       bit_set(data1,0);
....................     n = data1 - 0x7E;
.................... #endif
.................... 
....................       if (n<0) 
....................          r = -(float32)-n;
....................       else
....................          r = (float32)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... //Overloaded function for log() for PCD
.................... // Overloaded function log() for data type - Float48
.................... #if defined(__PCD__)
.................... // Overloaded function log() for data type - float64
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370,
....................                           -3.120535668274329, 2.000000000000000};
.................... 
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234,
....................                           1.113943039156721, -1.893601167470470};
.................... 
.................... float48 log(float48 x)
.................... {
....................    float48 y, res, r, y2;
....................    unsigned int8  data1,data2;
....................    signed int8 n;
.................... #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
.................... #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
.................... 
.................... #if !defined(__PCD__)
....................       *((unsigned int8 *)(&y)) = 0x7E; 
.................... #endif
....................       data2 = *(((unsigned int8 *)(&y))+5);
....................       *(((unsigned int8 *)(&y))+5) = 0x3F;
....................       data1 = *(((unsigned int8 *)(&y))+4);
....................       bit_clear(data1,7);
....................       *(((unsigned int8 *)(&y))+4) = data1;
.................... 
....................       if(bit_test(data2,7))
....................       bit_set(*(((unsigned int8 *)(&y))+4),7);
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0; 
....................       res = y*res/r;
.................... 
....................       data1 = *(((unsigned int8 *)(&x)+5));
....................       rotate_left(&data1,1);
....................       data2 = *(((unsigned int8 *)(&x)+4));
....................       if(bit_test (data2,7))
....................       bit_set(data1,0);
....................       
....................       n = data1 - 0x7E;
.................... 
....................       if (n<0)
....................       r = -(float48)-n;
....................       else
....................       r = (float48)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................    res = 0.0;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 log(float64 x)
.................... {
....................    float64 y, res, r, y2;
....................    unsigned int16  data1,data2;
....................    unsigned int16 *p;
....................    signed int16 n;
....................    #ifdef _ERRNO
....................    if(x <0)
....................    {
....................       errno=EDOM;
....................    }
....................    if(x ==0)
....................    {
....................       errno=ERANGE;
....................       return(0);
....................    }
....................    #endif
....................    y = x;
.................... 
....................    if (y != 1.0)
....................    {
....................    #if !defined(__PCD__)
....................        *((unsigned int8 *)(&y)) = 0x7E; 
....................    #endif
....................       p= (((unsigned int16 *)(&y))+3);
....................       data1 = *p;
....................       data2 = *p;
....................       data1 = 0x3FE;
....................       data1 = data1 <<4;
....................       if(bit_test (data2,15))
....................          bit_set(data1,15);
....................       data2 = data2 & 0x000F;
....................       data1 ^=data2;
.................... 
....................       *p = data1;
.................... 
....................       y = (y - 1.0)/(y + 1.0);
.................... 
....................       y2=y*y;
.................... 
....................       res = pl_64[0]*y2 + pl_64[1];
....................       res = res*y2 + pl_64[2];
....................       res = res*y2 + pl_64[3];
.................... 
....................       r = ql_64[0]*y2 + ql_64[1];
....................       r = r*y2 + ql_64[2];
....................       r = r*y2 + ql_64[3];
....................       r = r*y2 + 1.0;
.................... 
....................       res = y*res/r;
....................  
....................       p= (((unsigned int16 *)(&x))+3);
....................       data1 = *p;
....................       bit_clear(data1,15);
....................       data1 = data1 >>4;    
....................       n = data1 - 0x3FE;
.................... 
.................... 
....................       if (n<0)
....................          r = -(float64)-n;
....................       else
....................          r = (float64)n;
.................... 
....................       res += r*LN2;
....................    }
.................... 
....................    else
....................       res = 0.0;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... 
.................... #define LN10 2.3025850929940456
.................... #define LN10_INV 0.4342944819032518276
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float log10(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the the log base 10 of x
.................... // Date : N/A
.................... //
.................... float32 log10(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... //Overloaded functions for log10() for PCD
.................... // Overloaded function log10() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 log10(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... 
.................... // Overloaded function log10() for data type - Float64
.................... float64 log10(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = log(x);
....................    r = r*LN10_INV;
....................    return(r);
.................... }
.................... #endif
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float modf(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description :breaks the argument value int integral and fractional parts,
.................... // ach of which have the same sign as the argument.  It stores the integral part
.................... // as a float in the object pointed to by the iptr
.................... // Returns : returns the signed fractional part of value.
.................... // Date : N/A
.................... //
.................... 
.................... float32 modf(float32 value,float32 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... //Overloaded functions for modf() for PCD
.................... // Overloaded function modf() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 modf(float48 value,float48 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... // Overloaded function modf() for data type - Float64
.................... float64 modf(float64 value,float64 *iptr)
.................... {
....................    *iptr=(value < 0.0)? ceil(value): floor(value);
....................    return(value - *iptr);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pwr(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pwr(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       }
....................    }
.................... }
.................... //Overloaded functions for pwr() for PCD
.................... // Overloaded function pwr() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 pwr(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... // Overloaded function pwr() for data type - Float64
.................... float64 pwr(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Power functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float pow(float x,float y)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the value (x^y)
.................... // Date : N/A
.................... // Note : 0 is returned when the function will generate an imaginary number
.................... //
.................... float32 pow(float32 x,float32 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... //Overloaded functions for pow() for PCD
.................... // Overloaded function for pow() data type - Float48
.................... #if defined(__PCD__)
.................... float48 pow(float48 x,float48 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... 
.................... // Overloaded function pow() for data type - Float64
.................... float64 pow(float64 x,float64 y)
.................... {
....................    if(0 > x && fmod(y, 1) == 0) {
....................       if(fmod(y, 2) == 0) {
....................          return (exp(log(-x) * y));
....................       } else {
....................          return (-exp(log(-x) * y));
....................       }
....................    } else if(0 > x && fmod(y, 1) != 0) {
....................       return 0;
....................    } else {
....................       if(x != 0 || 0 >= y) {
....................          return (exp(log(x) * y));
....................       } else return 0;
....................    }
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sqrt(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the square root of x
.................... // Date : N/A
.................... //
.................... float32 sqrt(float32 x)
.................... {
....................    float32 y, res;
....................    #if defined(__PCD__)
....................    unsigned int16 data1,data2;
....................    #endif
....................    #if !defined(__PCD__)
....................    unsigned int8 *p;
....................    #endif
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);    
....................     if(bit_test(data2,7))    
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     data1 = *(((unsigned int8 *)(&y))+3);
....................     data2 = *(((unsigned int8 *)(&y))+2);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+3) = data1;
....................     *(((unsigned int8 *)(&y))+2) = data2;
....................     
....................   #endif
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for sqrt() for PCD
.................... // Overloaded function sqrt() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sqrt(float48 x)
.................... {
....................    float48 y, res;
....................    unsigned int16 data1,data2;
....................    unsigned int8 *p;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    
....................    #if !defined(__PCD__)
....................     p=&y;
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1);
....................    #endif
....................    
....................    #if defined(__PCD__)
....................     p = (((unsigned int8 *)(&y))+5);
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1 = ((data1+127) >>1);
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................   #endif
.................... 
....................    do {
....................       res=y;
....................       y+=(x/y);
.................... 
....................       #if !defined(__PCD__)
....................      (*p)--;
....................    #endif
....................    
....................     data1 = *(((unsigned int8 *)(&y))+5);
....................     data2 = *(((unsigned int8 *)(&y))+4);
....................     rotate_left(&data1,1);
....................     if(bit_test(data2,7))
....................        bit_set(data1,0);    
....................     data1--;
....................     bit_clear(data2,7);
....................     if(bit_test(data1,0))
....................        bit_set(data2,7);
....................     data1 = data1 >>1;
....................     *(((unsigned int8 *)(&y))+5) = data1;
....................     *(((unsigned int8 *)(&y))+4) = data2;
....................     
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function sqrt() for data type - Float64
.................... float64 sqrt(float64 x)
.................... {
....................    float64 y, res;
....................    unsigned int16 *p;
....................    unsigned int16 temp1,temp2;
.................... 
....................    #ifdef _ERRNO
....................    if(x < 0)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
.................... 
....................    if( x<=0.0)
....................       return(0.0);
.................... 
....................    y=x;
....................    p= (((unsigned int16 *)(&y))+3);
....................    temp1 = *p;
....................    temp2 = *p;
....................    bit_clear(temp1,15);
....................    temp1 = (temp1>>4)+1023;
....................    temp1 = temp1 >> 1;
....................    temp1 = (temp1<<4) & 0xFFF0;
....................    if(bit_test(temp2,15))
....................       bit_set(temp1,15);
....................    temp2 = temp2 & 0x000F;
....................    temp1 ^= temp2;
....................    
....................    (*p) = temp1;
....................    
....................    do {
....................       res=y;
....................       y+=(x/y);
....................      temp1 = *p;
....................      temp2 = *p;
....................      bit_clear(temp1,15);
....................      temp1 = (temp1>>4);
....................      temp1--;
....................      temp1 = (temp1<<4) & 0xFFF0;
....................      if(bit_test(temp2,15))
....................         bit_set(temp1,15);
....................      temp2 = temp2 & 0x000F;
....................      temp1 ^= temp2;
....................      (*p) = temp1;
.................... 
....................    } while(res != y);
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////// Trig Functions //////////////////////////////
.................... #ifdef PI_DIV_BY_TWO_INV
.................... #undef PI_DIV_BY_TWO_INV
.................... #endif
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134
.................... #ifdef PI_DIV_BY_TWO
.................... #undef PI_DIV_BY_TWO
.................... #endif
.................... #define PI_DIV_BY_TWO   1.5707963267948966
.................... #ifdef TWOBYPI
.................... #undef TWOBYPI
.................... #endif
.................... #define TWOBYPI          0.6366197723675813
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the cosine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 cos(float32 x)
.................... {
....................    float32 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float32 frac;
....................    float32 p[5] = {                    //by the series definition for cosine
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166663896921267,
....................       -0.00138883894522527,
....................        0.00002476138231734,
....................       -0.00000026070414770
....................       //-0.00000000001147,
....................       // 0.00000000000005
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 4; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... 
.................... //Overloaded functions for cos() for PCD
.................... // Overloaded function cos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cos(float48 x)
.................... {
....................    float48 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float48 frac;
....................    float48 p[6] = {                    //by the series definition for cosine
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! )
....................        0.04166666666667,
....................       -0.00138888888889,
....................        0.00002480158730,
....................       -0.00000027557319,
....................        0.00000000208767
....................    };
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 0.999999999781;
....................    t = t * t;
....................    for (i = 0; i <= 5; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... // Overloaded function cos() for data type - Float64
.................... float64 cos(float64 x)
.................... {
....................    float64 y, t, t2 = 1.0;
....................    unsigned int8 quad, i;
....................    float64 frac;
....................    float64 p_64[9] = {               //by the series definition for cosine
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )             
....................       0.04166666666656518,
....................      -0.00138888888851691,
....................       0.00002480158658490,
....................      -0.00000027557239796,
....................       0.00000000208715031,
....................      -0.00000000001126577,
....................       0.00000000000000427,
....................       0.00000000000000372};
.................... 
....................    if (x < 0) x = -x;                  // absolute value of input
.................... 
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input
....................    quad = quad % 4;                    // quadrant (0 to 3)
.................... 
....................    if (quad == 0 || quad == 2)
....................       t = frac * PI_DIV_BY_TWO;
....................    else if (quad == 1)
....................       t = (1-frac) * PI_DIV_BY_TWO;
....................    else // should be 3
....................       t = (frac-1) * PI_DIV_BY_TWO;
.................... 
....................    y = 1.0;
....................    t = t * t;
....................    for (i = 0; i <= 8; i++)
....................    {
....................       t2 = t2 * t;
....................       y = y + p_64[i] * t2;
....................    }
.................... 
....................    if (quad == 2 || quad == 1)
....................       y = -y;  // correct sign
.................... 
....................    return (y);
.................... }
.................... 
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the sine value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 sin(float32 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... //Overloaded functions for sin() for PCD
.................... // Overloaded function sin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sin(float48 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... 
.................... // Overloaded function sin() for data type - Float48
.................... float64 sin(float64 x)
.................... {
....................    return cos(x - PI_DIV_BY_TWO);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the tangent value of the angle x, which is in radian
.................... // Date : 9/20/2001
.................... //
.................... float32 tan(float32 x)
.................... {
....................    float32 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... //Overloaded functions for tan() for PCD
.................... // Overloaded function tan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tan(float48 x)
.................... {
....................    float48 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... 
.................... // Overloaded function tan() for data type - Float48
.................... float64 tan(float64 x)
.................... {
....................    float64 c, s;
.................... 
....................    c = cos(x);
....................    if (c == 0.0)
....................       return (1.0e+36);
.................... 
....................    s = sin(x);
....................    return(s/c);
.................... }
.................... #endif
.................... 
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290};
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290};
.................... 
.................... float32 ASIN_COS(float32 x, unsigned int8 n)
.................... {
....................    float32 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... 
.................... //Overloaded functions for ASIN_COS() for PCD
.................... // Overloaded function ASIN_COS() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 ASIN_COS(float48 x, unsigned int8 n)
.................... {
....................    float48 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas[0]*y2 + pas[1];
....................    res = res*y2 + pas[2];
.................... 
....................    r = qas[0]*y2 + qas[1];
....................    r = r*y2 + qas[2];
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... 
.................... // Overloaded function ASIN_COS() for data type - Float64
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907,
....................                  -0.360690137621842,0.024929451660228};
.................... 
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133,
....................                    0.052808872045749,-0.000662536036570};
....................                    
.................... float64 ASIN_COS(float64 x, unsigned int8 n)
.................... {
....................    float64 y, res, r, y2;
....................    int1 s;
....................    #ifdef _ERRNO
....................    if(x <-1 || x > 1)
....................    {
....................       errno=EDOM;
....................    }
....................    #endif
....................    s = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 0.5)
....................    {
....................       y = sqrt((1.0 - y)*0.5);
....................       n += 2;
....................    }
.................... 
....................    y2=y*y;
.................... 
....................    res = pas_64[4]*y2 + pas_64[3];
....................    res = res*y2 + pas_64[2];
....................    res = res*y2 + pas_64[1];
....................    res = res*y2 + pas_64[0];
.................... 
....................    r = qas_64[4]*y2 + qas_64[3];
....................    r = r*y2 + qas_64[2];
....................    r = r*y2 + qas_64[1];
....................    r = r*y2 + qas_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
....................    if (n & 2)     // |x| > 0.5
....................       res = PI_DIV_BY_TWO - 2.0*res;
....................    if (s)
....................       res = -res;
....................    if (n & 1)           // take arccos
....................       res = PI_DIV_BY_TWO - res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float asin(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arcsine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 asin(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... //Overloaded functions for asin() for PCD
.................... // Overloaded function asin() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 asin(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function asin() for data type - Float64
.................... float64 asin(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 0);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float acos(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arccosine value of the value x.
.................... // Date : N/A
.................... //
.................... float32 acos(float32 x)
.................... {
....................    float32 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... //Overloaded functions for acos() for PCD
.................... // Overloaded function acos() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 acos(float48 x)
.................... {
....................    float48 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... 
.................... // Overloaded function acos() for data type - Float64
.................... float64 acos(float64 x)
.................... {
....................    float64 r;
.................... 
....................    r = ASIN_COS(x, 1);
....................    return(r);
.................... }
.................... #endif
.................... 
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457};
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457};
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float atan(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : returns the arctangent value of the value x.
.................... // Date : N/A
.................... //
.................... float32 atan(float32 x)
.................... {
....................    float32 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... //Overloaded functions for atan() for PCD
.................... // Overloaded function atan() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan(float48 x)
.................... {
....................    float48 y, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
.................... 
....................    res = pat[0]*y*y + pat[1];
....................    res = res*y*y + pat[2];
....................    res = res*y*y + pat[3];
.................... 
....................    r = qat[0]*y*y + qat[1];
....................    r = r*y*y + qat[2];
....................    r = r*y*y + qat[3];
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... 
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449,
....................                    0.579678874003185,0.072162702162882,0.002281100141660};
.................... 
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393,
....................                    0.182482977188688,0.011155377971690,0.000100013019160};
.................... // Overloaded function atan() for data type - Float64
.................... float64 atan(float64 x)
.................... {
....................    float64 y,y2, res, r;
....................    int1 s, flag;
.................... 
....................    s = 0;
....................    flag = 0;
....................    y = x;
.................... 
....................    if (x < 0)
....................    {
....................       s = 1;
....................       y = -y;
....................    }
.................... 
....................    if (y > 1.0)
....................    {
....................       y = 1.0/y;
....................       flag = 1;
....................    }
....................    y2 = y*y;
....................    res = pat_64[5]*y2 + pat_64[4];
....................    res = res*y2 + pat_64[3];
....................    res = res*y2 + pat_64[2];
....................    res = res*y2 + pat_64[1];
....................    res = res*y2 + pat_64[0];
.................... 
....................    r = qat_64[5]*y2 + qat_64[4];
....................    r = r*y2 + qat_64[3];
....................    r = r*y2 + qat_64[2];
....................    r = r*y2 + qat_64[1];
....................    r = r*y2 + qat_64[0];
....................    r = r*y2 + 1.0;
.................... 
....................    res = y*res/r;
.................... 
.................... 
....................    if (flag)                              // for |x| > 1
....................       res = PI_DIV_BY_TWO - res;
....................    if (s)
....................       res = -res;
.................... 
....................    return(res);
.................... }
.................... #endif
.................... 
.................... /////////////////////////////////////////////////////////////////////////////
.................... //   float atan2(float y, float x)
.................... /////////////////////////////////////////////////////////////////////////////
.................... // Description :computes the principal value of arc tangent of y/x, using the
.................... // signs of both the arguments to determine the quadrant of the return value
.................... // Returns : returns the arc tangent of y/x.
.................... // Date : N/A
.................... //
.................... 
.................... float32 atan2(float32 y,float32 x)
.................... {
....................    float32 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... //Overloaded functions for atan2() for PCD
.................... // Overloaded function atan2() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 atan2(float48 y,float48 x)
.................... {
....................    float48 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... 
.................... // Overloaded function atan2() for data type - Float64
.................... float64 atan2(float64 y,float64 x)
.................... {
....................    float64 z;
....................    int1 sign;
....................    unsigned int8 quad;
....................    sign=0;
....................    quad=0; //quadrant
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1));
....................    if(y<0.0)
....................    {
....................       sign=1;
....................       y=-y;
....................    }
....................    if(x<0.0)
....................    {
....................       x=-x;
....................    }
....................    if (x==0.0)
....................    {
....................       if(y==0.0)
....................       {
....................       #ifdef _ERRNO
....................       {
....................          errno=EDOM;
....................       }
....................       #endif
....................       }
....................       else
....................       {
....................          if(sign)
....................          {
....................          return (-(PI_DIV_BY_TWO));
....................          }
....................          else
....................          {
....................          return (PI_DIV_BY_TWO);
....................          }
....................       }
....................    }
....................    else
....................    {
....................       z=y/x;
....................       switch(quad)
....................       {
....................          case 1:
....................          {
....................             return atan(z);
....................             break;
....................          }
....................          case 2:
....................          {
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122
....................             return (PI-atan(z));
....................             break;
....................          }
....................          case 3:
....................          {
....................             return (atan(z)-PI);
....................             break;
....................          }
....................          case 4:
....................          {
....................             return (-atan(z));
....................             break;
....................          }
....................       }
....................    }
.................... }
.................... #endif
.................... 
.................... //////////////////// Hyperbolic functions ////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float cosh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic cosine value of x
.................... // Returns : returns the hyperbolic cosine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 cosh(float32 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... //Overloaded functions for cosh() for PCD
.................... // Overloaded function cosh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 cosh(float48 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function cosh() for data type - Float64
.................... float64 cosh(float64 x)
.................... {
....................    return ((exp(x)+exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float sinh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic sine value of x
.................... // Returns : returns the hyperbolic sine value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 sinh(float32 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... //Overloaded functions for sinh() for PCD
.................... // Overloaded function sinh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 sinh(float48 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... 
.................... // Overloaded function sinh() for data type - Float48
.................... float64 sinh(float64 x)
.................... {
.................... 
....................    return ((exp(x) - exp(-x))*0.5);
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float tanh(float x)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : Computes the hyperbolic tangent value of x
.................... // Returns : returns the hyperbolic tangent value of x
.................... // Date : N/A
.................... //
.................... 
.................... float32 tanh(float32 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... //Overloaded functions for tanh() for PCD
.................... // Overloaded function tanh() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 tanh(float48 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... 
.................... // Overloaded function tanh() for data type - Float64
.................... float64 tanh(float64 x)
.................... {
....................    return(sinh(x)/cosh(x));
.................... }
.................... #endif
.................... 
.................... ////////////////////////////////////////////////////////////////////////////
.................... //   float frexp(float x, signed int *exp)
.................... ////////////////////////////////////////////////////////////////////////////
.................... // Description : breaks a floating point number into a normalized fraction and an integral
.................... // power of 2. It stores the integer in the signed int object pointed to by exp.
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero,
.................... // both parts of the result are zero.
.................... // Date : N/A
.................... //
.................... 
.................... #define LOG2 .30102999566398119521
.................... #define LOG2_INV 3.32192809488736234787
.................... float32 frexp(float32 x, signed int8 *exp)
.................... {
....................    float32 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... //Overloaded functions for frexp() for PCD
.................... // Overloaded function frexp() for data type - Float48
.................... #if defined(__PCD__)
.................... float48 frexp(float48 x, signed int8 *exp)
.................... {
....................    float48 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... 
.................... // Overloaded function frexp() for data type - Float64
.................... float64 frexp(float64 x, signed int8 *exp)
.................... {
....................    float64 res;
....................    int1 sign = 0;
....................    if(x == 0.0)
....................    {
....................       *exp=0;
....................       return (0.0);
....................    }
....................    if(x < 0.0)
....................    {
....................      x=-x;
....................      sign=1;
....................    }
....................    if (x > 1.0)
....................    {
....................       *exp=(ceil(log10(x)*LOG2_INV));
....................       res=x/(pow(2, *exp));
....................       if (res == 1)
....................       {
....................          *exp=*exp+1;
....................           res=.5;
....................       }
....................    }
....................    else
....................    {
....................       if(x < 0.5)
....................       {
....................          *exp=-1;
....................          res=x*2;
....................       }
....................       else
....................       {
....................          *exp=0;
....................           res=x;
....................       }
....................    }
....................    if(sign)
....................    {
....................       res=-res;
....................    }
....................    return res;
.................... }
.................... #endif
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... //   float ldexp(float x, signed int *exp)
.................... //////////////////////////////////////////////////////////////////////////////
.................... // Description : multiplies a floating point number by an integral power of 2.
.................... // Returns : returns the value of x times 2 raised to the power exp.
.................... // Date : N/A
.................... //
.................... 
.................... float32 ldexp(float32 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... //Overloaded functions for ldexp() for PCD
.................... // Overloaded function ldexp() for data type - Float48
.................... 
.................... #if defined(__PCD__)
.................... float48 ldexp(float48 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... // Overloaded function ldexp() for data type - Float64
.................... float64 ldexp(float64 value, signed int8 exp)
.................... {
....................    return (value * pow(2,exp));
.................... }
.................... #endif
.................... 
.................... #endif
.................... 
.................... #use delay(clock=4000000)
*
001E:  MOVLW  3C
001F:  MOVWF  04
0020:  BCF    03.7
0021:  MOVF   00,W
0022:  BTFSC  03.2
0023:  GOTO   032
0024:  MOVLW  01
0025:  MOVWF  78
0026:  CLRF   77
0027:  DECFSZ 77,F
0028:  GOTO   027
0029:  DECFSZ 78,F
002A:  GOTO   026
002B:  MOVLW  4A
002C:  MOVWF  77
002D:  DECFSZ 77,F
002E:  GOTO   02D
002F:  GOTO   030
0030:  DECFSZ 00,F
0031:  GOTO   024
0032:  RETURN
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD.
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD.
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD.
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address).
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD.
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD.
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD.
.................... void lcd_putc(char c);            // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD.
.................... // Khai bao bien.
.................... // Dinh nghia cac thong so.
.................... #define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien.
.................... #define LCD_RW_PIN         PIN_D2
.................... #define LCD_ENABLE_PIN     PIN_D3
.................... #define LCD_DATA4          PIN_D4
.................... #define LCD_DATA5          PIN_D5
.................... #define LCD_DATA6          PIN_D6
.................... #define LCD_DATA7          PIN_D7 
.................... 
.................... //!#define LCD_RS_PIN         PIN_C0   // Cac ket noi C.LCD voi vi dieu khien.
.................... //!#define LCD_RW_PIN         PIN_C1
.................... //!#define LCD_ENABLE_PIN     PIN_C2
.................... //!#define LCD_DATA4          PIN_C3
.................... //!#define LCD_DATA5          PIN_C4
.................... //!#define LCD_DATA6          PIN_C5
.................... //!#define LCD_DATA7          PIN_C6
.................... 
.................... /*
.................... #define LCD_RS_PIN         PIN_D1   // Cac ket noi C.LCD voi vi dieu khien.
.................... #define LCD_RW_PIN      PIN_D2
.................... #define LCD_ENABLE_PIN  PIN_D3
.................... #define LCD_DATA4       PIN_D4
.................... #define LCD_DATA5       PIN_D5
.................... #define LCD_DATA6       PIN_D6
.................... #define LCD_DATA7       PIN_D7  
.................... */
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN.
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN)
.................... 
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN.
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN)
.................... 
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN)
.................... 
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1.
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2.
.................... #define lcd_line_three   0x14
.................... #define lcd_line_four   0x54
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines
.................... 
.................... // Dinh nghia cac hang so.
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06};
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD.
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F).
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font).
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7.
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10.
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7.
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro).
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink).
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong.
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi).
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift).
....................       // Byte 5: .... - Doi con tro / hien thi.
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left).
.................... 
.................... // ***************************************************
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD.
.................... {
.................... // Khai bao bien.
.................... byte i;
.................... // Dinh nghia ham.
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra.
*
00E6:  BSF    03.5
00E7:  BCF    08.4
.................... output_drive(LCD_DATA5);
00E8:  BCF    08.5
.................... output_drive(LCD_DATA6);
00E9:  BCF    08.6
.................... output_drive(LCD_DATA7);
00EA:  BCF    08.7
.................... 
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra.
00EB:  BCF    08.3
.................... lcd_rs_tris();
00EC:  BCF    08.1
.................... lcd_rw_tris();
00ED:  BCF    08.2
.................... 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh.
00EE:  BCF    03.5
00EF:  BCF    08.1
00F0:  BSF    03.5
00F1:  BCF    08.1
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD.
00F2:  BCF    03.5
00F3:  BCF    08.2
00F4:  BSF    03.5
00F5:  BCF    08.2
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
00F6:  BCF    03.5
00F7:  BCF    08.3
00F8:  BSF    03.5
00F9:  BCF    08.3
.................... 
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon).
00FA:  MOVLW  0F
00FB:  BCF    03.5
00FC:  MOVWF  3C
00FD:  CALL   01E
.................... 
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep
00FE:  MOVLW  01
00FF:  MOVWF  2E
0100:  MOVF   2E,W
0101:  SUBLW  03
0102:  BTFSS  03.0
0103:  GOTO   10C
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong 
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham).
0104:  MOVLW  03
0105:  MOVWF  43
0106:  CALL   033
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit).
0107:  MOVLW  05
0108:  MOVWF  3C
0109:  CALL   01E
010A:  INCF   2E,F
010B:  GOTO   100
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai 
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat).
.................... 
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi
010C:  MOVLW  02
010D:  MOVWF  43
010E:  CALL   033
....................                      // ra truoc tien, sau do la 4 bit thap.
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit).
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay.
.................... 
.................... for(i=0;i<=3;i++)
010F:  CLRF   2E
0110:  MOVF   2E,W
0111:  SUBLW  03
0112:  BTFSS  03.0
0113:  GOTO   11D
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD.
0114:  MOVF   2E,W
0115:  CALL   004
0116:  MOVWF  2F
0117:  CLRF   40
0118:  MOVF   2F,W
0119:  MOVWF  41
011A:  CALL   08F
011B:  INCF   2E,F
011C:  GOTO   110
011D:  BCF    0A.3
011E:  BCF    0A.4
011F:  GOTO   4B6 (RETURN)
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD.
.................... 
.................... // ***************************************************
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD.
.................... {
.................... // Khai bao bien.
.................... byte low,high;
.................... // Dinh nghia ham.
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao.
*
0092:  BSF    08.4
.................... output_float(LCD_DATA5);
0093:  BSF    08.5
.................... output_float(LCD_DATA6);
0094:  BSF    08.6
.................... output_float(LCD_DATA7);
0095:  BSF    08.7
.................... 
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD.
0096:  BCF    03.5
0097:  BSF    08.2
0098:  BSF    03.5
0099:  BCF    08.2
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD.
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
009A:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD.
009B:  BCF    03.5
009C:  BSF    08.3
009D:  BSF    03.5
009E:  BCF    08.3
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
009F:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao).
00A0:  BCF    03.5
00A1:  CALL   05E
00A2:  MOVF   78,W
00A3:  MOVWF  43
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
00A4:  BCF    08.3
00A5:  BSF    03.5
00A6:  BCF    08.3
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD.
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00A7:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD.
00A8:  BCF    03.5
00A9:  BSF    08.3
00AA:  BSF    03.5
00AB:  BCF    08.3
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00AC:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap).
00AD:  BCF    03.5
00AE:  CALL   05E
00AF:  MOVF   78,W
00B0:  MOVWF  42
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD.
00B1:  BCF    08.3
00B2:  BSF    03.5
00B3:  BCF    08.3
.................... 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra.
00B4:  BCF    08.4
.................... output_drive(LCD_DATA5);
00B5:  BCF    08.5
.................... output_drive(LCD_DATA6);
00B6:  BCF    08.6
.................... output_drive(LCD_DATA7);
00B7:  BCF    08.7
.................... 
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit).
00B8:  BCF    03.5
00B9:  SWAPF  43,W
00BA:  MOVWF  77
00BB:  MOVLW  F0
00BC:  ANDWF  77,F
00BD:  MOVF   77,W
00BE:  IORWF  42,W
00BF:  MOVWF  78
.................... }
.................... 
.................... // ***************************************************
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD.
*
005E:  CLRF   44
.................... {
.................... // Khai bao bien.
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin.
.................... // Dinh nghia ham.
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu.
005F:  BSF    03.5
0060:  BSF    08.4
0061:  MOVLW  00
0062:  BCF    03.5
0063:  BTFSC  08.4
0064:  MOVLW  01
0065:  IORWF  44,F
.................... n |= input(LCD_DATA5) << 1;
0066:  BSF    03.5
0067:  BSF    08.5
0068:  MOVLW  00
0069:  BCF    03.5
006A:  BTFSC  08.5
006B:  MOVLW  01
006C:  MOVWF  77
006D:  BCF    03.0
006E:  RLF    77,F
006F:  MOVF   77,W
0070:  IORWF  44,F
.................... n |= input(LCD_DATA6) << 2;
0071:  BSF    03.5
0072:  BSF    08.6
0073:  MOVLW  00
0074:  BCF    03.5
0075:  BTFSC  08.6
0076:  MOVLW  01
0077:  MOVWF  77
0078:  RLF    77,F
0079:  RLF    77,F
007A:  MOVLW  FC
007B:  ANDWF  77,F
007C:  MOVF   77,W
007D:  IORWF  44,F
.................... n |= input(LCD_DATA7) << 3;
007E:  BSF    03.5
007F:  BSF    08.7
0080:  MOVLW  00
0081:  BCF    03.5
0082:  BTFSC  08.7
0083:  MOVLW  01
0084:  MOVWF  77
0085:  RLF    77,F
0086:  RLF    77,F
0087:  RLF    77,F
0088:  MOVLW  F8
0089:  ANDWF  77,F
008A:  MOVF   77,W
008B:  IORWF  44,F
.................... 
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx).
008C:  MOVF   44,W
008D:  MOVWF  78
008E:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address).
.................... {                                 // address = 0: Lenh / 1: Du lieu.
....................                                  // byte = Thong tin can gui (8 bit).
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham.  
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh.
008F:  BCF    08.1
0090:  BSF    03.5
0091:  BCF    08.1
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong).
*
00C0:  MOVF   78,W
00C1:  MOVWF  42
00C2:  BTFSS  42.7
00C3:  GOTO   0C6
00C4:  BSF    03.5
00C5:  GOTO   092
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu.
00C6:  MOVF   40,F
00C7:  BTFSS  03.2
00C8:  GOTO   0CB
00C9:  BCF    08.1
00CA:  GOTO   0CC
00CB:  BSF    08.1
00CC:  BSF    03.5
00CD:  BCF    08.1
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00CE:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD.
00CF:  BCF    03.5
00D0:  BCF    08.2
00D1:  BSF    03.5
00D2:  BCF    08.2
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
00D3:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD.
00D4:  BCF    03.5
00D5:  BCF    08.3
00D6:  BSF    03.5
00D7:  BCF    08.3
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD.
00D8:  BCF    03.5
00D9:  SWAPF  41,W
00DA:  MOVWF  42
00DB:  MOVLW  0F
00DC:  ANDWF  42,F
00DD:  MOVF   42,W
00DE:  MOVWF  43
00DF:  CALL   033
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD.
00E0:  MOVF   41,W
00E1:  ANDLW  0F
00E2:  MOVWF  42
00E3:  MOVWF  43
00E4:  CALL   033
00E5:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD.
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap.
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham. 
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu.
*
0033:  BTFSC  43.0
0034:  GOTO   037
0035:  BCF    08.4
0036:  GOTO   038
0037:  BSF    08.4
0038:  BSF    03.5
0039:  BCF    08.4
.................... output_bit(LCD_DATA5, bit_test(n, 1));
003A:  BCF    03.5
003B:  BTFSC  43.1
003C:  GOTO   03F
003D:  BCF    08.5
003E:  GOTO   040
003F:  BSF    08.5
0040:  BSF    03.5
0041:  BCF    08.5
.................... output_bit(LCD_DATA6, bit_test(n, 2));
0042:  BCF    03.5
0043:  BTFSC  43.2
0044:  GOTO   047
0045:  BCF    08.6
0046:  GOTO   048
0047:  BSF    08.6
0048:  BSF    03.5
0049:  BCF    08.6
.................... output_bit(LCD_DATA7, bit_test(n, 3));
004A:  BCF    03.5
004B:  BTFSC  43.3
004C:  GOTO   04F
004D:  BCF    08.7
004E:  GOTO   050
004F:  BSF    08.7
0050:  BSF    03.5
0051:  BCF    08.7
....................     
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz).
0052:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD.
0053:  BCF    03.5
0054:  BSF    08.3
0055:  BSF    03.5
0056:  BCF    08.3
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz).
0057:  GOTO   058
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low).
0058:  BCF    03.5
0059:  BCF    08.3
005A:  BSF    03.5
005B:  BCF    08.3
005C:  BCF    03.5
005D:  RETURN
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1).
.................... {
.................... // Khai bao bien.
.................... byte address;
.................... // Dinh nghia ham.  
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2.
*
0120:  DECFSZ 3D,W
0121:  GOTO   124
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2. 
0122:  CLRF   3E
0123:  GOTO   138
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1.
0124:  MOVF   3D,W
0125:  SUBLW  02
0126:  BTFSS  03.2
0127:  GOTO   12B
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1.
0128:  MOVLW  40
0129:  MOVWF  3E
012A:  GOTO   138
.................... else if(y==3)
012B:  MOVF   3D,W
012C:  SUBLW  03
012D:  BTFSS  03.2
012E:  GOTO   132
....................    address=lcd_line_three;     
012F:  MOVLW  14
0130:  MOVWF  3E
0131:  GOTO   138
.................... else if(y==4)
0132:  MOVF   3D,W
0133:  SUBLW  04
0134:  BTFSS  03.2
0135:  GOTO   138
....................    address=lcd_line_four;   
0136:  MOVLW  54
0137:  MOVWF  3E
.................... 
.................... address+=x-1;               // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1).      
0138:  MOVLW  01
0139:  SUBWF  3C,W
013A:  ADDWF  3E,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0.
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD.
013B:  MOVF   3E,W
013C:  IORLW  80
013D:  MOVWF  3F
013E:  CLRF   40
013F:  MOVF   3F,W
0140:  MOVWF  41
0141:  CALL   08F
0142:  RETURN
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).   
.................... 
.................... // ***************************************************
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD.
.................... {
.................... // Khai bao bien.
.................... char value;
.................... // Dinh nghia ham.  
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat.
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong).
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu.
.................... value = lcd_read_byte();   // Doc ve tu C.LCD.
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh.
.................... 
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau.
.................... }
.................... 
.................... // ***************************************************
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD.
.................... {
.................... // Khai bao bien.
.................... 
.................... // Dinh nghia ham. 
.................... switch (c)
0143:  MOVF   3B,W
0144:  XORLW  0C
0145:  BTFSC  03.2
0146:  GOTO   14E
0147:  XORLW  06
0148:  BTFSC  03.2
0149:  GOTO   156
014A:  XORLW  02
014B:  BTFSC  03.2
014C:  GOTO   15C
014D:  GOTO   161
....................    {
....................    case '\f':     // Chuc nang xoa hien thi.
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD.
014E:  CLRF   40
014F:  MOVLW  01
0150:  MOVWF  41
0151:  CALL   08F
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01).
0152:  MOVLW  02
0153:  MOVWF  3C
0154:  CALL   01E
....................       break;
0155:  GOTO   166
....................    case '\n':       // Chuc nang bat dau hang thu 2.
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.   
0156:  MOVLW  01
0157:  MOVWF  3C
0158:  MOVLW  02
0159:  MOVWF  3D
015A:  CALL   120
....................       break;
015B:  GOTO   166
....................     case '\b':       // Chuc nang lui ve 1 vi tri.
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD. 
015C:  CLRF   40
015D:  MOVLW  10
015E:  MOVWF  41
015F:  CALL   08F
....................       break;               // Lenh: Doi con tro sang trai (0x10).
0160:  GOTO   166
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD.
....................       lcd_send_byte(1,c);     // Goi ham truyen thong tin (du lieu) sang C.LCD.
0161:  MOVLW  01
0162:  MOVWF  40
0163:  MOVF   3B,W
0164:  MOVWF  41
0165:  CALL   08F
....................       break;
....................    }
0166:  RETURN
.................... }      
.................... // ***************************************************   
.................... 
.................... 
.................... 
.................... 
.................... void main()
*
04A7:  MOVF   03,W
04A8:  ANDLW  1F
04A9:  MOVWF  03
04AA:  CLRF   21
04AB:  CLRF   20
04AC:  BSF    03.5
04AD:  BSF    1F.0
04AE:  BSF    1F.1
04AF:  BSF    1F.2
04B0:  BCF    1F.3
04B1:  MOVLW  07
04B2:  MOVWF  1C
04B3:  BCF    03.7
.................... {
....................    float Tam,GiaTriADC;
....................    float NhietDo;
....................    
....................    lcd_init();//khoi tao lcd
04B4:  BCF    03.5
04B5:  GOTO   0E6
....................    lcd_putc('\f');//xoa man hinh lcd
04B6:  MOVLW  0C
04B7:  MOVWF  3B
04B8:  CALL   143
....................    
....................    lcd_gotoxy(1,1);
04B9:  MOVLW  01
04BA:  MOVWF  3C
04BB:  MOVWF  3D
04BC:  CALL   120
....................    printf(lcd_putc,"DO NHIET DO LM35");
04BD:  MOVLW  0C
04BE:  BSF    03.6
04BF:  MOVWF  0D
04C0:  MOVLW  00
04C1:  MOVWF  0F
04C2:  BCF    03.6
04C3:  CALL   167
....................    
....................    setup_adc(ADC_CLOCK_INTERNAL);
04C4:  BSF    03.5
04C5:  BCF    1F.6
04C6:  BCF    03.5
04C7:  BSF    1F.6
04C8:  BSF    1F.7
04C9:  BSF    03.5
04CA:  BSF    1F.7
04CB:  BCF    03.5
04CC:  BSF    1F.0
....................    setup_adc_ports(AN0_AN1_VSS_VREF);
04CD:  BSF    03.5
04CE:  BSF    1F.0
04CF:  BCF    1F.1
04D0:  BSF    1F.2
04D1:  BCF    1F.3
....................    set_adc_channel(0);
04D2:  MOVLW  00
04D3:  MOVWF  78
04D4:  BCF    03.5
04D5:  MOVF   1F,W
04D6:  ANDLW  C7
04D7:  IORWF  78,W
04D8:  MOVWF  1F
....................    
....................    
....................    while(TRUE)
....................    {
....................       //TODO: User Code
....................       GiaTriADC = read_adc();
04D9:  BSF    1F.2
04DA:  BTFSC  1F.2
04DB:  GOTO   4DA
04DC:  MOVF   1E,W
04DD:  MOVWF  79
04DE:  BSF    03.5
04DF:  MOVF   1E,W
04E0:  MOVWF  78
04E1:  MOVF   79,W
04E2:  MOVWF  7A
04E3:  MOVF   1E,W
04E4:  BCF    03.5
04E5:  MOVWF  2E
04E6:  MOVF   79,W
04E7:  MOVWF  2F
04E8:  GOTO   1BD
04E9:  MOVF   7A,W
04EA:  MOVWF  29
04EB:  MOVF   79,W
04EC:  MOVWF  28
04ED:  MOVF   78,W
04EE:  MOVWF  27
04EF:  MOVF   77,W
04F0:  MOVWF  26
....................       Tam = (GiaTriADC*5)/1023.0f;// hay con goi la gia tri dien ap
04F1:  MOVF   29,W
04F2:  MOVWF  3E
04F3:  MOVF   28,W
04F4:  MOVWF  3D
04F5:  MOVF   27,W
04F6:  MOVWF  3C
04F7:  MOVF   26,W
04F8:  MOVWF  3B
04F9:  CLRF   42
04FA:  CLRF   41
04FB:  MOVLW  20
04FC:  MOVWF  40
04FD:  MOVLW  81
04FE:  MOVWF  3F
04FF:  CALL   1DC
0500:  MOVF   7A,W
0501:  MOVWF  31
0502:  MOVF   79,W
0503:  MOVWF  30
0504:  MOVF   78,W
0505:  MOVWF  2F
0506:  MOVF   77,W
0507:  MOVWF  2E
0508:  MOVF   7A,W
0509:  MOVWF  35
050A:  MOVF   79,W
050B:  MOVWF  34
050C:  MOVF   78,W
050D:  MOVWF  33
050E:  MOVF   77,W
050F:  MOVWF  32
0510:  CLRF   39
0511:  MOVLW  C0
0512:  MOVWF  38
0513:  MOVLW  7F
0514:  MOVWF  37
0515:  MOVLW  88
0516:  MOVWF  36
0517:  GOTO   251
0518:  MOVF   7A,W
0519:  MOVWF  25
051A:  MOVF   79,W
051B:  MOVWF  24
051C:  MOVF   78,W
051D:  MOVWF  23
051E:  MOVF   77,W
051F:  MOVWF  22
....................       /*
....................          Ta co 10mV --> 1 do C
....................          -->   xV  ---> ? do C
....................          =====> ? = xV*1/10mv(0.01V)
....................       */
....................       NhietDo = Tam *100.0f;// nhan 100 = chia 0.01V
0520:  MOVF   25,W
0521:  MOVWF  3E
0522:  MOVF   24,W
0523:  MOVWF  3D
0524:  MOVF   23,W
0525:  MOVWF  3C
0526:  MOVF   22,W
0527:  MOVWF  3B
0528:  CLRF   42
0529:  CLRF   41
052A:  MOVLW  48
052B:  MOVWF  40
052C:  MOVLW  85
052D:  MOVWF  3F
052E:  CALL   1DC
052F:  MOVF   7A,W
0530:  MOVWF  2D
0531:  MOVF   79,W
0532:  MOVWF  2C
0533:  MOVF   78,W
0534:  MOVWF  2B
0535:  MOVF   77,W
0536:  MOVWF  2A
....................       lcd_gotoxy(1,2);
0537:  MOVLW  01
0538:  MOVWF  3C
0539:  MOVLW  02
053A:  MOVWF  3D
053B:  CALL   120
....................       printf(lcd_putc,"NHIETDO:%02.2f",NhietDo);
053C:  MOVLW  15
053D:  BSF    03.6
053E:  MOVWF  0D
053F:  MOVLW  00
0540:  MOVWF  0F
0541:  BCF    03.0
0542:  MOVLW  08
0543:  BCF    03.6
0544:  MOVWF  2E
0545:  GOTO   31D
0546:  MOVLW  C9
0547:  MOVWF  04
0548:  MOVF   2D,W
0549:  MOVWF  31
054A:  MOVF   2C,W
054B:  MOVWF  30
054C:  MOVF   2B,W
054D:  MOVWF  2F
054E:  MOVF   2A,W
054F:  MOVWF  2E
0550:  MOVLW  02
0551:  MOVWF  32
0552:  GOTO   3C5
....................       lcd_putc(223);
0553:  MOVLW  DF
0554:  MOVWF  3B
0555:  CALL   143
....................       lcd_putc("C");
0556:  MOVLW  1D
0557:  BSF    03.6
0558:  MOVWF  0D
0559:  MOVLW  00
055A:  MOVWF  0F
055B:  BCF    03.6
055C:  CALL   167
055D:  GOTO   4D9
....................       
....................    }
.................... 
.................... }
.................... 
055E:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
